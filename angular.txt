gulp常用API：src（读取文件）、 dest（复制）、 watch（监听）、 task（任务）、 pipe（管道连接）

angular概念：
module directive（核心） 表达式 service
injector 依赖注入 模型 filter
数据绑定 $scope controller view

最常用： module directive controller service filter

ng-app:初始化加载 ng-app 指令所指定的 模块

ngular-ui-router angular的路由：
angular.module('app').config(['$stateProvider', '$urlRouterProvider', function($stateProvider, $urlRouterProvider) {
  $stateProvider.state('main', {
    url: '/main',
    templateUrl: 'view/main.html',
    controller: 'mainCtrl'
  }).state('position', {
    url: '/position/:id',
    templateUrl: 'view/position.html',
    controller: 'positionCtrl'
  });
  $urlRouterProvider.otherwise('main');
}])

路由跳转方法：
1、标签上添加ui-sref="me({id:1})"
2、$state.go(herf,{id:1},{reload: true});


angularjs中指令的restrict 值可以是以下几种:
E 作为元素名使用
A 作为属性使用
C 作为类名使用
M 作为注释使用
restrict 默认值为 EA, 即可以通过元素名和属性名来调用指令。

scope的值：
可选 ，默认是false 
false: 使用父作用域，指令中对属性的修改，会直接 作用到父级作用域中 
true: 从父作用域继承 ，并创建一个新的作用域对象 ，指令 中可以访问 父级的作用域，修改不会影响 到父级 
{}: 创建一个隔离作用域，不能访问 父级的作用域，修改也不会影响 到父级
scope隔离作用域的绑定策略：
@（常量）： 本地作用域属性 ，使用@符号将子级作用域同DOM属性的值进行绑定。子级作用域可以
    使用父级作用域的变量，但内部作用域的变量改变，不会影响外部作用域的绑定变量， 
    即单向绑定。   ***注意绑定的方式{{变量}}***
=（变量）： 双向绑定：通过=可以将子级作用域上的属性同父级作用域上的属性进行双向的数据绑定。
    就像普通的数据绑定一样，子级作用域上会属性变量变化会引起父级作用域上数据模型中的改变，
    即双向绑定。 ***注意绑定的方式{{变量}}***
&（回调函数） 与父级的方法绑定


页面html需要ui-view
<div ui-view>
</div>

模版html只能有一个根元素

控制器controller：

angular.module('app').controller('mainCtrl', ['$http', '$scope', function($http, $scope){
  $http.get('/data/positionList.json').success(function(resp){
    $scope.list = resp;
  });
}]);

$scope是双向数据绑定的核心  方式：{{ }}   ng-bind  ng-model

ng-repeat循环
ng-src="{{item.imageUrl}}"  绑定动态路径
ng-if 判断
ng-click绑定点击事件


指令（相当于一个组件）：通过HTML标签、属性、样式或注释使angular编译器来为指定的DOM元素绑定特定的行为，甚至是改变DOM元素和它的子元素
内置指令：ng-model、 ng-bind、ng-click、ng-class、ng-if、ng-hide
自定义指令常用属性：restrict、scope、template、templateUrl、link、transclude

angular的controller（控制器 视图对应的业务逻辑，为数据模型添加行为和属性）：
angular.module('app').controller('mainCtrl', ['$http', '$scope', function($http, $scope){
  $http.get('/data/positionList.json').success(function(resp){
    $scope.list = resp;
  });
}]);
常用属性：$id（作用域id）、 $parent（父级作用域）、 $root（根作用域）
常用函数：$watch（监听变量）、 $on（监听事件）、 $broadcast（广播事件）、 $emit（向上派发事件）、 $digest（当用原生获取DOM时同步双向数据绑定）


service（服务  返回的是函数）     ｛ facotry(返回的是对象  功能跟service相等) ｝
单例、懒加载、公用函数
常用服务————$http、 $q（处理并发请求 类似promise、） $timeout（延迟执行）、 $interval（循环执行）、 $rootScope（scope的根对象）
自定义服务————cache（缓存cookie）

angular.module('app').service('cache', ['$cookies', function($cookies){
    this.put = function(key, value){
      $cookies.put(key, value);
    };
    this.get = function(key) {
      return $cookies.get(key);
    };
    this.remove = function(key) {
      $cookies.remove(key);
    };
}]);


AngularJS $http用法总结(https://blog.csdn.net/qq_31490071/article/details/80704224)

1.$http.get的通用格式
 $http.get(url, [config])  
 .success(function(data){})  
 .error(function(data){});

 2.$http.post的通用格式
 $http.post(url,data,[config])  
  .success(function(result){  
   })  
  .error(function(result){  
   });   

filter（过滤器）用来格式化或者过滤数据  例如 {{ data | number}}
内置过滤器：currency（显示价格）、number、date、lowercase、uppercase、limitTo（取数组多少个）、orderBy（排序）
自定义过滤器： {{待过滤数据 | 过滤器名：参数1：参数2：参数3.....}}
				app.filter('过滤器名', function () {
				    return function (待过滤数据, 参数....) {
				           ......
				      return 已过滤数据;
				 }

angular-validation插件进行表单验证：	$validationProvider


通过装饰器decorator可以把post请求变成get请求